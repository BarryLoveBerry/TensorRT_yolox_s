# 指定cmake最小版本
# cmake_minimum_required(VERSION 2.8.7)
# 设置项目名称
# project(yolox)
# 设置编译类型
# add_executable(demo demo.cpp) # 生成可执行文件
# add_library(common STATIC util.cpp) # 生成静态库
# add_library(common SHARED util.cpp) # 生成动态库或共享库 

# 指定编译包含的源文件
# 1. 明确指定包含哪些源文件
# add_library(demo demo.cpp test.cpp util.cpp)
# 2. 搜索所有的cpp文件
# aux_source_directory(. SRC_LIST) # 搜索当前目录下的所有.cpp文件
# add_library(demo ${SRC_LIST})

# 3. 自定义搜索规则
# file(GLOB SRC_LIST "*.cpp" "protocol/*.cpp")
# add_library(demo ${SRC_LIST})
# 或者
# file(GLOB SRC_LIST "*.cpp")
# file(GLOB SRC_PROTOCOL_LIST "protocol/*.cpp")
# add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})
# 或者
# aux_source_directory(. SRC_LIST)
# aux_source_directory(protocol SRC_PROTOCOL_LIST)
# add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})

# 查找指定的库文件
# find_library(VAR name path)
# 查找到指定的预编译库，并将它的路径储存在变量中
# 默认的搜索路径为cmake包含的系统库，因此如果是NDK的公共库只需要指定库的name即可
# find_library (log-lib log)
# 类似命令还有find_file(), find_path(), find_program(), find_package()


# # 设置包含的目录
# include_directories(
#     ${CMAKE_CURRENT_SOURCE_DIR}
#     ${CMAKE_CURRENT_BINARY_DIR}
#     ${CMAKE_CURRENT_SOURCE_DIR}/include(
# )
# # Linux下还可以通过如下方式设置包含的目录
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${CMAKE_CURRENT_SOURCE_DIR}")

# # 设置链接库搜索目录
# link_directories(${CMAKE_CURRENT_SOURCE_DIR}/libs)

# # Linux下还可以通过如下方式设置包含的目录
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${CMAKE_CURRENT_SOURCE_DIR}/libs")

# 设置需要链接搜索的库
# link_libraries 和 target_link_libraries
# link_libraries（链接静态库） 用在add_executable之前， target_link_libraries（用来链接导入库）用在add_executable之后

# 指定链接动态库或静态库
# target_link_libraries(yolox libface.a)

# target_link_libraries(yolox libface.so)

# # 指定全路径
# target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.a)
# target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libface.so)

# 13、常用变量
# 13.1 预定义变量
# PROJECT_SOURCE_DIR：工程的根目录
# PROJECT_BINARY_DIR：运行 cmake 命令的目录，通常是 ${PROJECT_SOURCE_DIR}/build
# PROJECT_NAME：返回通过 project 命令定义的项目名称
# CMAKE_CURRENT_SOURCE_DIR：当前处理的 CMakeLists.txt 所在的路径
# CMAKE_CURRENT_BINARY_DIR：target 编译目录
# CMAKE_CURRENT_LIST_DIR：CMakeLists.txt 的完整路径
# CMAKE_CURRENT_LIST_LINE：当前所在的行
# CMAKE_MODULE_PATH：定义自己的 cmake 模块所在的路径，SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)，然后可以用INCLUDE命令来调用自己的模块
# EXECUTABLE_OUTPUT_PATH：重新定义目标二进制可执行文件的存放位置
# LIBRARY_OUTPUT_PATH：重新定义目标链接库文件的存放位置

# 13.2 环境变量
# $ENV{Name}
# set(ENV{Name} value) # 这里没有“$”符号

# 13.3 系统信息
# CMAKE_MAJOR_VERSION：cmake 主版本号，比如 3.4.1 中的 3
# ­CMAKE_MINOR_VERSION：cmake 次版本号，比如 3.4.1 中的 4
# ­CMAKE_PATCH_VERSION：cmake 补丁等级，比如 3.4.1 中的 1
# ­CMAKE_SYSTEM：系统名称，比如 Linux-­2.6.22
# ­CMAKE_SYSTEM_NAME：不包含版本的系统名，比如 Linux
# ­CMAKE_SYSTEM_VERSION：系统版本，比如 2.6.22
# ­CMAKE_SYSTEM_PROCESSOR：处理器名称，比如 i686
# ­UNIX：在所有的类 UNIX 平台下该值为 TRUE，包括 OS X 和 cygwin
# ­WIN32：在所有的 win32 平台下该值为 TRUE，包括 cygwin

# 14、主要开关选项
# BUILD_SHARED_LIBS：这个开关用来控制默认的库编译方式，如果不进行设置，使用 add_library 又没有指定库类型的情况下，默认编译生成的库都是静态库。如果 set(BUILD_SHARED_LIBS ON) 后，默认生成的为动态库
# CMAKE_C_FLAGS：设置 C 编译选项，也可以通过指令 add_definitions() 添加
# CMAKE_CXX_FLAGS：设置 C++ 编译选项，也可以通过指令 add_definitions() 添加
# add_definitions(-DENABLE_DEBUG -DABC) # 参数之间用空格分隔